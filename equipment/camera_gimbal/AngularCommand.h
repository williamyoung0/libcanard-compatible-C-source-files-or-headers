/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: E:\DSDL\libcanard\dsdl_compiler\pyuavcan\uavcan\dsdl_files\uavcan\equipment\camera_gimbal\1040.AngularCommand.uavcan
 */

#ifndef __UAVCAN_EQUIPMENT_CAMERA_GIMBAL_ANGULARCOMMAND
#define __UAVCAN_EQUIPMENT_CAMERA_GIMBAL_ANGULARCOMMAND

#include <stdint.h>
#include "canard.h"

#ifdef __cplusplus
extern "C"
{
#endif

#include <uavcan\equipment\camera_gimbal\Mode.h>

/******************************* Source text **********************************
#
# Generic camera gimbal control.
#
# This message can only be used in the following modes:
#  - COMMAND_MODE_ANGULAR_VELOCITY
#  - COMMAND_MODE_ORIENTATION_FIXED_FRAME
#  - COMMAND_MODE_ORIENTATION_BODY_FRAME
#

uint8 gimbal_id

#
# Target operation mode - how to handle this message.
# See the list of acceptable modes above.
#
Mode mode

#
# In the angular velocity mode, this field contains a rate quaternion.
# In the orientation mode, this field contains orientation either in fixed frame or in body frame.
#
float16[4] quaternion_xyzw
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.equipment.camera_gimbal.AngularCommand
saturated uint8 gimbal_id
uavcan.equipment.camera_gimbal.Mode mode
saturated float16[4] quaternion_xyzw
******************************************************************************/

#define UAVCAN_EQUIPMENT_CAMERA_GIMBAL_ANGULARCOMMAND_ID   1040
#define UAVCAN_EQUIPMENT_CAMERA_GIMBAL_ANGULARCOMMAND_NAME "uavcan.equipment.camera_gimbal.AngularCommand"
#define UAVCAN_EQUIPMENT_CAMERA_GIMBAL_ANGULARCOMMAND_SIGNATURE (0x4AF6E57B2B2BE29CULL)

#define UAVCAN_EQUIPMENT_CAMERA_GIMBAL_ANGULARCOMMAND_MAX_SIZE ((80 + 7)/8)

// Constants

#define UAVCAN_EQUIPMENT_CAMERA_GIMBAL_ANGULARCOMMAND_QUATERNION_XYZW_LENGTH             4

typedef struct
{
    // FieldTypes
    uint8_t    gimbal_id;                     // bit len 8
    uavcan_equipment_camera_gimbal_Mode mode;                          //
    float      quaternion_xyzw[4];            // Static Array 16bit[4] max items

} uavcan_equipment_camera_gimbal_AngularCommand;

extern
uint32_t uavcan_equipment_camera_gimbal_AngularCommand_encode(uavcan_equipment_camera_gimbal_AngularCommand* source, void* msg_buf);

extern
int32_t uavcan_equipment_camera_gimbal_AngularCommand_decode(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_equipment_camera_gimbal_AngularCommand* dest, uint8_t** dyn_arr_buf);

extern
uint32_t uavcan_equipment_camera_gimbal_AngularCommand_encode_internal(uavcan_equipment_camera_gimbal_AngularCommand* source, void* msg_buf, uint32_t offset, uint8_t root_item);

extern
int32_t uavcan_equipment_camera_gimbal_AngularCommand_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_equipment_camera_gimbal_AngularCommand* dest, uint8_t** dyn_arr_buf, int32_t offset);

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __UAVCAN_EQUIPMENT_CAMERA_GIMBAL_ANGULARCOMMAND