/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: E:\DSDL\libcanard\dsdl_compiler\pyuavcan\uavcan\dsdl_files\uavcan\equipment\ice\1129.FuelTankStatus.uavcan
 */

#ifndef __UAVCAN_EQUIPMENT_ICE_FUELTANKSTATUS
#define __UAVCAN_EQUIPMENT_ICE_FUELTANKSTATUS

#include <stdint.h>
#include "canard.h"

#ifdef __cplusplus
extern "C"
{
#endif

/******************************* Source text **********************************
#
# Generic fuel tank status message.
# All fields are required unless stated otherwise. Unpopulated optional fields should be set to NaN.
#

#
# Reserved for future use.
#
void9

#
# The estimated amount of fuel.
# The reported values can be either measured directly using appropriate sensors,
# or they can be estimated by fusing the data provided by various sensors.
# For example, a Kalman filter can be used to fuse the data from fuel level sensors and flow sensors.
# All fields are required.
#
uint7 available_fuel_volume_percent     # Unit: percent, from 0% to 100%
float32 available_fuel_volume_cm3       # Unit: centimeter^3

#
# Estimate of the current fuel consumption rate.
# The flow can be negative if the fuel is being transferred between the tanks or during refueling.
# This field is required.
# Unit: (centimeter^3)/minute
#
float32 fuel_consumption_rate_cm3pm

#
# Fuel temperature.
# This field is optional, set to NaN if not provided.
# Unit: kelvin
#
float16 fuel_temperature

#
# The ID of the current fuel tank.
#
uint8 fuel_tank_id
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.equipment.ice.FuelTankStatus
void9
saturated uint7 available_fuel_volume_percent
saturated float32 available_fuel_volume_cm3
saturated float32 fuel_consumption_rate_cm3pm
saturated float16 fuel_temperature
saturated uint8 fuel_tank_id
******************************************************************************/

#define UAVCAN_EQUIPMENT_ICE_FUELTANKSTATUS_ID             1129
#define UAVCAN_EQUIPMENT_ICE_FUELTANKSTATUS_NAME           "uavcan.equipment.ice.FuelTankStatus"
#define UAVCAN_EQUIPMENT_ICE_FUELTANKSTATUS_SIGNATURE      (0x286B4A387BA84BC4ULL)

#define UAVCAN_EQUIPMENT_ICE_FUELTANKSTATUS_MAX_SIZE       ((104 + 7)/8)

// Constants

typedef struct
{
    // FieldTypes
    // void9
    uint8_t    available_fuel_volume_percent; // bit len 7
    float      available_fuel_volume_cm3;     // float32 Saturate
    float      fuel_consumption_rate_cm3pm;   // float32 Saturate
    float      fuel_temperature;              // float16 Saturate
    uint8_t    fuel_tank_id;                  // bit len 8

} uavcan_equipment_ice_FuelTankStatus;

extern
uint32_t uavcan_equipment_ice_FuelTankStatus_encode(uavcan_equipment_ice_FuelTankStatus* source, void* msg_buf);

extern
int32_t uavcan_equipment_ice_FuelTankStatus_decode(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_equipment_ice_FuelTankStatus* dest, uint8_t** dyn_arr_buf);

extern
uint32_t uavcan_equipment_ice_FuelTankStatus_encode_internal(uavcan_equipment_ice_FuelTankStatus* source, void* msg_buf, uint32_t offset, uint8_t root_item);

extern
int32_t uavcan_equipment_ice_FuelTankStatus_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_equipment_ice_FuelTankStatus* dest, uint8_t** dyn_arr_buf, int32_t offset);

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __UAVCAN_EQUIPMENT_ICE_FUELTANKSTATUS