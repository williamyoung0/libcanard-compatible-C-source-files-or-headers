/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: E:\DSDL\libcanard\dsdl_compiler\pyuavcan\uavcan\dsdl_files\uavcan\equipment\ice\reciprocating\CylinderStatus.uavcan
 */

#ifndef __UAVCAN_EQUIPMENT_ICE_RECIPROCATING_CYLINDERSTATUS
#define __UAVCAN_EQUIPMENT_ICE_RECIPROCATING_CYLINDERSTATUS

#include <stdint.h>
#include "canard.h"

#ifdef __cplusplus
extern "C"
{
#endif

/******************************* Source text **********************************
#
# Cylinder state information.
# This is a nested data type.
#
# All unknown parameters should be set to NaN.
#

#
# Cylinder ignition timing.
# Units: angular degrees of the crankshaft.
#
float16 ignition_timing_deg

#
# Fuel injection time.
# Units: millisecond.
#
float16 injection_time_ms

#
# Cylinder head temperature (CHT).
# Units: kelvin.
#
float16 cylinder_head_temperature

#
# Exhaust gas temperature (EGT).
# Set to NaN if this cylinder is not equipped with an EGT sensor.
# Set this field to the same value for all cylinders if there is a single shared EGT sensor.
# Units: kelvin.
#
float16 exhaust_gas_temperature

#
# Estimated lambda coefficient.
# This parameter is mostly useful for monitoring and tuning purposes.
# Unit: dimensionless ratio
#
float16 lambda_coefficient
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.equipment.ice.reciprocating.CylinderStatus
saturated float16 ignition_timing_deg
saturated float16 injection_time_ms
saturated float16 cylinder_head_temperature
saturated float16 exhaust_gas_temperature
saturated float16 lambda_coefficient
******************************************************************************/

#define UAVCAN_EQUIPMENT_ICE_RECIPROCATING_CYLINDERSTATUS_NAME "uavcan.equipment.ice.reciprocating.CylinderStatus"
#define UAVCAN_EQUIPMENT_ICE_RECIPROCATING_CYLINDERSTATUS_SIGNATURE (0xD68AC83A89D5B36BULL)

#define UAVCAN_EQUIPMENT_ICE_RECIPROCATING_CYLINDERSTATUS_MAX_SIZE ((80 + 7)/8)

// Constants

typedef struct
{
    // FieldTypes
    float      ignition_timing_deg;           // float16 Saturate
    float      injection_time_ms;             // float16 Saturate
    float      cylinder_head_temperature;     // float16 Saturate
    float      exhaust_gas_temperature;       // float16 Saturate
    float      lambda_coefficient;            // float16 Saturate

} uavcan_equipment_ice_reciprocating_CylinderStatus;

extern
uint32_t uavcan_equipment_ice_reciprocating_CylinderStatus_encode(uavcan_equipment_ice_reciprocating_CylinderStatus* source, void* msg_buf);

extern
int32_t uavcan_equipment_ice_reciprocating_CylinderStatus_decode(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_equipment_ice_reciprocating_CylinderStatus* dest, uint8_t** dyn_arr_buf);

extern
uint32_t uavcan_equipment_ice_reciprocating_CylinderStatus_encode_internal(uavcan_equipment_ice_reciprocating_CylinderStatus* source, void* msg_buf, uint32_t offset, uint8_t root_item);

extern
int32_t uavcan_equipment_ice_reciprocating_CylinderStatus_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_equipment_ice_reciprocating_CylinderStatus* dest, uint8_t** dyn_arr_buf, int32_t offset);

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __UAVCAN_EQUIPMENT_ICE_RECIPROCATING_CYLINDERSTATUS