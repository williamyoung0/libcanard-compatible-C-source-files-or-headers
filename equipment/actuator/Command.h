/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: E:\DSDL\libcanard\dsdl_compiler\pyuavcan\uavcan\dsdl_files\uavcan\equipment\actuator\Command.uavcan
 */

#ifndef __UAVCAN_EQUIPMENT_ACTUATOR_COMMAND
#define __UAVCAN_EQUIPMENT_ACTUATOR_COMMAND

#include <stdint.h>
#include "canard.h"

#ifdef __cplusplus
extern "C"
{
#endif

/******************************* Source text **********************************
#
# Nested type.
# Single actuator command.
#

uint8 actuator_id

#
# Whether the units are linear or angular depends on the actuator type.
#
uint8 COMMAND_TYPE_UNITLESS     = 0     # [-1, 1]
uint8 COMMAND_TYPE_POSITION     = 1     # meter or radian
uint8 COMMAND_TYPE_FORCE        = 2     # Newton or Newton metre
uint8 COMMAND_TYPE_SPEED        = 3     # meter per second or radian per second
uint8 command_type

#
# Value of the above type
#
float16 command_value
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.equipment.actuator.Command
saturated uint8 actuator_id
saturated uint8 command_type
saturated float16 command_value
******************************************************************************/

#define UAVCAN_EQUIPMENT_ACTUATOR_COMMAND_NAME             "uavcan.equipment.actuator.Command"
#define UAVCAN_EQUIPMENT_ACTUATOR_COMMAND_SIGNATURE        (0x8D9A6A920C1D616CULL)

#define UAVCAN_EQUIPMENT_ACTUATOR_COMMAND_MAX_SIZE         ((32 + 7)/8)

// Constants
#define UAVCAN_EQUIPMENT_ACTUATOR_COMMAND_COMMAND_TYPE_UNITLESS               0 // 0
#define UAVCAN_EQUIPMENT_ACTUATOR_COMMAND_COMMAND_TYPE_POSITION               1 // 1
#define UAVCAN_EQUIPMENT_ACTUATOR_COMMAND_COMMAND_TYPE_FORCE                  2 // 2
#define UAVCAN_EQUIPMENT_ACTUATOR_COMMAND_COMMAND_TYPE_SPEED                  3 // 3

typedef struct
{
    // FieldTypes
    uint8_t    actuator_id;                   // bit len 8
    uint8_t    command_type;                  // bit len 8
    float      command_value;                 // float16 Saturate

} uavcan_equipment_actuator_Command;

extern
uint32_t uavcan_equipment_actuator_Command_encode(uavcan_equipment_actuator_Command* source, void* msg_buf);

extern
int32_t uavcan_equipment_actuator_Command_decode(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_equipment_actuator_Command* dest, uint8_t** dyn_arr_buf);

extern
uint32_t uavcan_equipment_actuator_Command_encode_internal(uavcan_equipment_actuator_Command* source, void* msg_buf, uint32_t offset, uint8_t root_item);

extern
int32_t uavcan_equipment_actuator_Command_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_equipment_actuator_Command* dest, uint8_t** dyn_arr_buf, int32_t offset);

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __UAVCAN_EQUIPMENT_ACTUATOR_COMMAND