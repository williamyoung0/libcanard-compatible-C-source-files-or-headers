/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: E:\DSDL\libcanard\dsdl_compiler\pyuavcan\uavcan\dsdl_files\uavcan\equipment\actuator\1011.Status.uavcan
 */

#ifndef __UAVCAN_EQUIPMENT_ACTUATOR_STATUS
#define __UAVCAN_EQUIPMENT_ACTUATOR_STATUS

#include <stdint.h>
#include "canard.h"

#ifdef __cplusplus
extern "C"
{
#endif

/******************************* Source text **********************************
#
# Generic actuator feedback, if available.
# Unknown fields should be set to NAN.
#

uint8 actuator_id

#
# Whether the units are linear or angular depends on the actuator type (refer to the Command data type).
#
float16 position        # meter or radian
float16 force           # Newton or Newton metre
float16 speed           # meter per second or radian per second

void1
uint7 POWER_RATING_PCT_UNKNOWN = 127
uint7 power_rating_pct                # 0 - unloaded, 100 - full load
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.equipment.actuator.Status
saturated uint8 actuator_id
saturated float16 position
saturated float16 force
saturated float16 speed
void1
saturated uint7 power_rating_pct
******************************************************************************/

#define UAVCAN_EQUIPMENT_ACTUATOR_STATUS_ID                1011
#define UAVCAN_EQUIPMENT_ACTUATOR_STATUS_NAME              "uavcan.equipment.actuator.Status"
#define UAVCAN_EQUIPMENT_ACTUATOR_STATUS_SIGNATURE         (0x5E9BBA44FAF1EA04ULL)

#define UAVCAN_EQUIPMENT_ACTUATOR_STATUS_MAX_SIZE          ((64 + 7)/8)

// Constants
#define UAVCAN_EQUIPMENT_ACTUATOR_STATUS_POWER_RATING_PCT_UNKNOWN           127 // 127

typedef struct
{
    // FieldTypes
    uint8_t    actuator_id;                   // bit len 8
    float      position;                      // float16 Saturate
    float      force;                         // float16 Saturate
    float      speed;                         // float16 Saturate
    // void1
    uint8_t    power_rating_pct;              // bit len 7

} uavcan_equipment_actuator_Status;

extern
uint32_t uavcan_equipment_actuator_Status_encode(uavcan_equipment_actuator_Status* source, void* msg_buf);

extern
int32_t uavcan_equipment_actuator_Status_decode(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_equipment_actuator_Status* dest, uint8_t** dyn_arr_buf);

extern
uint32_t uavcan_equipment_actuator_Status_encode_internal(uavcan_equipment_actuator_Status* source, void* msg_buf, uint32_t offset, uint8_t root_item);

extern
int32_t uavcan_equipment_actuator_Status_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_equipment_actuator_Status* dest, uint8_t** dyn_arr_buf, int32_t offset);

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __UAVCAN_EQUIPMENT_ACTUATOR_STATUS