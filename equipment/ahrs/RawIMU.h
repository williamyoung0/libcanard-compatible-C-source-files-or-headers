/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: E:\DSDL\libcanard\dsdl_compiler\pyuavcan\uavcan\dsdl_files\uavcan\equipment\ahrs\1003.RawIMU.uavcan
 */

#ifndef __UAVCAN_EQUIPMENT_AHRS_RAWIMU
#define __UAVCAN_EQUIPMENT_AHRS_RAWIMU

#include <stdint.h>
#include "canard.h"

#ifdef __cplusplus
extern "C"
{
#endif

#include <uavcan\Timestamp.h>

/******************************* Source text **********************************
#
# Raw IMU data with timestamps.
#
# THIS DEFINITION MAY BE CHANGED IN A NON-BACKWARD-COMPATIBLE WAY IN THE FUTURE.
#

#
# Data acquisition timestamp in the bus shared time base.
#
uavcan.Timestamp timestamp

#
# Integration interval, seconds.
# Set to a non-positive value if the integrated samples are not available
# (in this case, only the latest point samples will be valid).
#
float32 integration_interval

#
# Angular velocity samples in radian/second.
# The samples are represented in the body frame, the axes are ordered as follows:
#   1. angular velocity around X (roll rate)
#   2. angular velocity around Y (pitch rate)
#   3. angular velocity around Z (yaw rate)
#
float16[3] rate_gyro_latest                 # Latest sample, radian/second
float32[3] rate_gyro_integral               # Integrated samples, radian/second

#
# Linear acceleration samples in meter/(second^2).
# The samples are represented in the body frame, the axes are ordered as follows:
#   1. linear acceleration along X (forward positive)
#   2. linear acceleration along Y (right positive)
#   3. linear acceleration along Z (down positive)
#
float16[3] accelerometer_latest             # Latest sample, meter/(second^2)
float32[3] accelerometer_integral           # Integrated samples, meter/(second^2)

#
# Covariance matrix. The diagonal entries are ordered as follows:
#   1. roll rate                (radian^2)/(second^2)
#   2. pitch rate               (radian^2)/(second^2)
#   3. yaw rate                 (radian^2)/(second^2)
#   4. forward acceleration     (meter^2)/(second^4)
#   5. rightward acceleration   (meter^2)/(second^4)
#   6. downward acceleration    (meter^2)/(second^4)
#
float16[<=36] covariance
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.equipment.ahrs.RawIMU
uavcan.Timestamp timestamp
saturated float32 integration_interval
saturated float16[3] rate_gyro_latest
saturated float32[3] rate_gyro_integral
saturated float16[3] accelerometer_latest
saturated float32[3] accelerometer_integral
saturated float16[<=36] covariance
******************************************************************************/

#define UAVCAN_EQUIPMENT_AHRS_RAWIMU_ID                    1003
#define UAVCAN_EQUIPMENT_AHRS_RAWIMU_NAME                  "uavcan.equipment.ahrs.RawIMU"
#define UAVCAN_EQUIPMENT_AHRS_RAWIMU_SIGNATURE             (0x8280632C40E574B5ULL)

#define UAVCAN_EQUIPMENT_AHRS_RAWIMU_MAX_SIZE              ((958 + 7)/8)

// Constants

#define UAVCAN_EQUIPMENT_AHRS_RAWIMU_RATE_GYRO_LATEST_LENGTH                             3
#define UAVCAN_EQUIPMENT_AHRS_RAWIMU_RATE_GYRO_INTEGRAL_LENGTH                           3
#define UAVCAN_EQUIPMENT_AHRS_RAWIMU_ACCELEROMETER_LATEST_LENGTH                         3
#define UAVCAN_EQUIPMENT_AHRS_RAWIMU_ACCELEROMETER_INTEGRAL_LENGTH                       3
#define UAVCAN_EQUIPMENT_AHRS_RAWIMU_COVARIANCE_MAX_LENGTH                               36

typedef struct
{
    // FieldTypes
    uavcan_Timestamp timestamp;                     //
    float      integration_interval;          // float32 Saturate
    float      rate_gyro_latest[3];           // Static Array 16bit[3] max items
    float      rate_gyro_integral[3];         // Static Array 32bit[3] max items
    float      accelerometer_latest[3];       // Static Array 16bit[3] max items
    float      accelerometer_integral[3];     // Static Array 32bit[3] max items
    struct
    {
        uint8_t    len;                       // Dynamic array length
        float*     data;                      // Dynamic Array 16bit[36] max items
    } covariance;

} uavcan_equipment_ahrs_RawIMU;

extern
uint32_t uavcan_equipment_ahrs_RawIMU_encode(uavcan_equipment_ahrs_RawIMU* source, void* msg_buf);

extern
int32_t uavcan_equipment_ahrs_RawIMU_decode(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_equipment_ahrs_RawIMU* dest, uint8_t** dyn_arr_buf);

extern
uint32_t uavcan_equipment_ahrs_RawIMU_encode_internal(uavcan_equipment_ahrs_RawIMU* source, void* msg_buf, uint32_t offset, uint8_t root_item);

extern
int32_t uavcan_equipment_ahrs_RawIMU_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_equipment_ahrs_RawIMU* dest, uint8_t** dyn_arr_buf, int32_t offset);

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __UAVCAN_EQUIPMENT_AHRS_RAWIMU