/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: E:\DSDL\libcanard\dsdl_compiler\pyuavcan\uavcan\dsdl_files\uavcan\equipment\air_data\1025.AngleOfAttack.uavcan
 */

#ifndef __UAVCAN_EQUIPMENT_AIR_DATA_ANGLEOFATTACK
#define __UAVCAN_EQUIPMENT_AIR_DATA_ANGLEOFATTACK

#include <stdint.h>
#include "canard.h"

#ifdef __cplusplus
extern "C"
{
#endif

/******************************* Source text **********************************
#
# Angle of attack.
#

uint8 SENSOR_ID_LEFT = 254
uint8 SENSOR_ID_RIGHT = 255
uint8 sensor_id

float16 aoa             # Radians
float16 aoa_variance    # Radians^2
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.equipment.air_data.AngleOfAttack
saturated uint8 sensor_id
saturated float16 aoa
saturated float16 aoa_variance
******************************************************************************/

#define UAVCAN_EQUIPMENT_AIR_DATA_ANGLEOFATTACK_ID         1025
#define UAVCAN_EQUIPMENT_AIR_DATA_ANGLEOFATTACK_NAME       "uavcan.equipment.air_data.AngleOfAttack"
#define UAVCAN_EQUIPMENT_AIR_DATA_ANGLEOFATTACK_SIGNATURE  (0xD5513C3F7AFAC74EULL)

#define UAVCAN_EQUIPMENT_AIR_DATA_ANGLEOFATTACK_MAX_SIZE   ((40 + 7)/8)

// Constants
#define UAVCAN_EQUIPMENT_AIR_DATA_ANGLEOFATTACK_SENSOR_ID_LEFT              254 // 254
#define UAVCAN_EQUIPMENT_AIR_DATA_ANGLEOFATTACK_SENSOR_ID_RIGHT             255 // 255

typedef struct
{
    // FieldTypes
    uint8_t    sensor_id;                     // bit len 8
    float      aoa;                           // float16 Saturate
    float      aoa_variance;                  // float16 Saturate

} uavcan_equipment_air_data_AngleOfAttack;

extern
uint32_t uavcan_equipment_air_data_AngleOfAttack_encode(uavcan_equipment_air_data_AngleOfAttack* source, void* msg_buf);

extern
int32_t uavcan_equipment_air_data_AngleOfAttack_decode(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_equipment_air_data_AngleOfAttack* dest, uint8_t** dyn_arr_buf);

extern
uint32_t uavcan_equipment_air_data_AngleOfAttack_encode_internal(uavcan_equipment_air_data_AngleOfAttack* source, void* msg_buf, uint32_t offset, uint8_t root_item);

extern
int32_t uavcan_equipment_air_data_AngleOfAttack_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_equipment_air_data_AngleOfAttack* dest, uint8_t** dyn_arr_buf, int32_t offset);

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __UAVCAN_EQUIPMENT_AIR_DATA_ANGLEOFATTACK