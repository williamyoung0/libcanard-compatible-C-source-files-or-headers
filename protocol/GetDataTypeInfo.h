/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: E:\DSDL\libcanard\dsdl_compiler\pyuavcan\uavcan\dsdl_files\uavcan\protocol\2.GetDataTypeInfo.uavcan
 */

#ifndef __UAVCAN_PROTOCOL_GETDATATYPEINFO
#define __UAVCAN_PROTOCOL_GETDATATYPEINFO

#include <stdint.h>
#include "canard.h"

#ifdef __cplusplus
extern "C"
{
#endif

#include <uavcan\protocol\DataTypeKind.h>

/******************************* Source text **********************************
#
# Get the implementation details of a given data type.
#
# Request is interpreted as follows:
#  - If the field 'name' is empty, the fields 'kind' and 'id' will be used to identify the data type.
#  - If the field 'name' is non-empty, it will be used to identify the data type; the
#    fields 'kind' and 'id' will be ignored.
#

uint16 id                   # Ignored if 'name' is non-empty
DataTypeKind kind           # Ignored if 'name' is non-empty

uint8[<=80] name            # Full data type name, e.g. "uavcan.protocol.GetDataTypeInfo"

---

uint64 signature            # Data type signature; valid only if the data type is known (see FLAG_KNOWN)

uint16 id                   # Valid only if the data type is known (see FLAG_KNOWN)
DataTypeKind kind           # Ditto

uint8 FLAG_KNOWN      = 1   # This data type is defined
uint8 FLAG_SUBSCRIBED = 2   # Subscribed to messages of this type
uint8 FLAG_PUBLISHING = 4   # Publishing messages of this type
uint8 FLAG_SERVING    = 8   # Providing service of this type
uint8 flags

uint8[<=80] name            # Full data type name
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.protocol.GetDataTypeInfo
saturated uint16 id
uavcan.protocol.DataTypeKind kind
saturated uint8[<=80] name
---
saturated uint64 signature
saturated uint16 id
uavcan.protocol.DataTypeKind kind
saturated uint8 flags
saturated uint8[<=80] name
******************************************************************************/

#define UAVCAN_PROTOCOL_GETDATATYPEINFO_ID                 2
#define UAVCAN_PROTOCOL_GETDATATYPEINFO_NAME               "uavcan.protocol.GetDataTypeInfo"
#define UAVCAN_PROTOCOL_GETDATATYPEINFO_SIGNATURE          (0x1B283338A7BED2D8ULL)

#define UAVCAN_PROTOCOL_GETDATATYPEINFO_REQUEST_MAX_SIZE   ((671 + 7)/8)

// Constants

#define UAVCAN_PROTOCOL_GETDATATYPEINFO_REQUEST_NAME_MAX_LENGTH                          80

typedef struct
{
    // FieldTypes
    uint16_t   id;                            // bit len 16
    uavcan_protocol_DataTypeKind kind;                          //
    struct
    {
        uint8_t    len;                       // Dynamic array length
        uint8_t*   data;                      // Dynamic Array 8bit[80] max items
    } name;

} uavcan_protocol_GetDataTypeInfoRequest;

extern
uint32_t uavcan_protocol_GetDataTypeInfoRequest_encode(uavcan_protocol_GetDataTypeInfoRequest* source, void* msg_buf);

extern
int32_t uavcan_protocol_GetDataTypeInfoRequest_decode(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_protocol_GetDataTypeInfoRequest* dest, uint8_t** dyn_arr_buf);

extern
uint32_t uavcan_protocol_GetDataTypeInfoRequest_encode_internal(uavcan_protocol_GetDataTypeInfoRequest* source, void* msg_buf, uint32_t offset, uint8_t root_item);

extern
int32_t uavcan_protocol_GetDataTypeInfoRequest_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_protocol_GetDataTypeInfoRequest* dest, uint8_t** dyn_arr_buf, int32_t offset);

#define UAVCAN_PROTOCOL_GETDATATYPEINFO_RESPONSE_MAX_SIZE  ((743 + 7)/8)

// Constants
#define UAVCAN_PROTOCOL_GETDATATYPEINFO_RESPONSE_FLAG_KNOWN                   1 // 1
#define UAVCAN_PROTOCOL_GETDATATYPEINFO_RESPONSE_FLAG_SUBSCRIBED              2 // 2
#define UAVCAN_PROTOCOL_GETDATATYPEINFO_RESPONSE_FLAG_PUBLISHING              4 // 4
#define UAVCAN_PROTOCOL_GETDATATYPEINFO_RESPONSE_FLAG_SERVING                 8 // 8

#define UAVCAN_PROTOCOL_GETDATATYPEINFO_RESPONSE_NAME_MAX_LENGTH                         80

typedef struct
{
    // FieldTypes
    uint64_t   signature;                     // bit len 64
    uint16_t   id;                            // bit len 16
    uavcan_protocol_DataTypeKind kind;                          //
    uint8_t    flags;                         // bit len 8
    struct
    {
        uint8_t    len;                       // Dynamic array length
        uint8_t*   data;                      // Dynamic Array 8bit[80] max items
    } name;

} uavcan_protocol_GetDataTypeInfoResponse;

extern
uint32_t uavcan_protocol_GetDataTypeInfoResponse_encode(uavcan_protocol_GetDataTypeInfoResponse* source, void* msg_buf);

extern
int32_t uavcan_protocol_GetDataTypeInfoResponse_decode(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_protocol_GetDataTypeInfoResponse* dest, uint8_t** dyn_arr_buf);

extern
uint32_t uavcan_protocol_GetDataTypeInfoResponse_encode_internal(uavcan_protocol_GetDataTypeInfoResponse* source, void* msg_buf, uint32_t offset, uint8_t root_item);

extern
int32_t uavcan_protocol_GetDataTypeInfoResponse_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_protocol_GetDataTypeInfoResponse* dest, uint8_t** dyn_arr_buf, int32_t offset);

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __UAVCAN_PROTOCOL_GETDATATYPEINFO